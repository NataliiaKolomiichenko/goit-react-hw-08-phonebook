{"version":3,"file":"static/js/309.2fb33144.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Modal/Modal.module.css?28d7","webpack://goit-react-hw-08-phonebook/./src/components/ChangingContactForm/ChangingContactForm.module.css?4563","components/ChangingContactForm/ChangingContactForm.jsx","components/Modal/Modal.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/PagesStyle.module.css?9dfc"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n    const items = selectContacts(state);\n    const { filter } = selectFilter(state);\n\n    if (!filter) {\n        return items;\n    }\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const filteredContacts = items.filter(({ name }) => {\n        const normalizedName = name.toLocaleLowerCase();\n        return normalizedName.includes(normalizedFilter);\n    })\n    return filteredContacts;\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"inputLabel\":\"ContactForm_inputLabel__LEeFC\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css'\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    addNewContact(name);\n  };\n\n  const addNewContact = (contactName) => {\n    const normalizedNameNewContract = contactName.toLowerCase();\n    const contactNames = contacts.map(contact => {\n      const contactName = contact.name;\n      return contactName.toLowerCase()\n    })\n    if (contactNames.includes(normalizedNameNewContract)) {\n      return alert(`${name} is already in contacts.`)\n    }\n      \n    dispatch(addContact({ name, number }));\n    setName('');\n    setNumber('')\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  return <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.inputLabel}> Name\n            <input\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n        </label>\n        \n        <label className={css.inputLabel}> Phone number\n            <input\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n        </label>\n        \n        <button type=\"submit\" className={css.btn}>Add contact</button>\n      </form>\n    \n}\n\nexport default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"overlay\":\"Modal_overlay__r63M6\",\"modal\":\"Modal_modal__DJDMv\"};","// extracted by mini-css-extract-plugin\nexport default {\"changingForm\":\"ChangingContactForm_changingForm__xlybJ\",\"changingFormInput\":\"ChangingContactForm_changingFormInput__heH7U\",\"changingFormInputLabel\":\"ChangingContactForm_changingFormInputLabel__YHJGN\",\"changingFormBtn\":\"ChangingContactForm_changingFormBtn__ZMzFB\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useState } from 'react';\nimport PropTypes from \"prop-types\";\nimport css from './ChangingContactForm.module.css'\n\nconst ChangingContactForm = ({ id, onToggle, prevName, prevNumber }) => {\n  const [name, setName] = useState(prevName);\n  const [number, setNumber] = useState(prevNumber);\n  const contacts = useSelector(selectContacts)\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    updatedContact(name);\n    onToggle()\n  };\n\n  const updatedContact = (contactName) => {\n    const normalizedNameNewContract = contactName.toLowerCase();\n    const contactNames = contacts.map(contact => {\n      const contactName = contact.name;\n      return contactName.toLowerCase()\n    })\n    if (contactNames.includes(normalizedNameNewContract)) {\n      return alert(`${name} is already in contacts.`)\n    }\n      \n    dispatch(updateContact({ id, name, number }));\n    setName('');\n    setNumber('')\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget\n    \n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    };\n  };\n\n  return <form className={css.changingForm} onSubmit={handleSubmit}>\n        <label className={css.changingFormInputLabel}> Name\n            <input\n              className={css.changingFormInput}\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              defaultValue={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n        </label>\n        \n        <label className={css.changingFormInputLabel}> Phone number\n            <input\n              className={css.changingFormInput}\n              type=\"tel\"\n              name=\"number\"\n              onChange={handleChange}\n              defaultValue={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n        </label>\n        <p>Please, change name or number</p>\n        <button type=\"submit\" className={css.changingFormBtn}>Change contact</button>\n      </form>\n    \n}\n\nChangingContactForm.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  prevName: PropTypes.string.isRequired,\n  prevNumber: PropTypes.string.isRequired,\n}\n\nexport default ChangingContactForm;","import css from \"./Modal.module.css\"\nimport { useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ChangingContactForm from \"components/ChangingContactForm\";\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst Modal = ({ onToggle, id, name, number }) => {\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        onToggle();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => { window.removeEventListener('keydown', handleKeyDown) };\n  }, [onToggle])\n\n  const handleBackdrop = (event) => {\n    if (event.currentTarget === event.target) {\n      onToggle()\n    }\n  }\n\n  return (createPortal(\n      <div className={css.overlay} onClick={handleBackdrop}>\n      <ChangingContactForm id={id} onToggle={onToggle} prevName={name} prevNumber={number} />\n        </div>, modalRoot\n    )\n  )\n}\n\nModal.propTypes = {\n  onToggle: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n}\n\nexport default Modal;","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"ContactItem_listItem__NSSYk\",\"contactItem_text\":\"ContactItem_contactItem_text__P7QJP\",\"btn\":\"ContactItem_btn__1h5dG\"};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux'\nimport { deleteContact } from 'redux/contacts/operations'\nimport Modal from 'components/Modal/Modal';\nimport PropTypes from 'prop-types'\nimport css from './ContactItem.module.css'\n\nconst ContactItem = ({ name, number, id }) => {\n  const [showModal, setShowModal] = useState(false);\n    const dispatch = useDispatch();\n\n    const toggleModal = () => {\n    setShowModal(prevState => !prevState);\n  }\n\n    return <li className={css.listItem}><p className={css.contactItem_text}>{name}: {number}</p>\n      <div><button type=\"button\" className={css.btn} onClick={() => toggleModal()}>Change</button><button type=\"button\" className={css.btn} onClick={() => dispatch(deleteContact(id))}>Delete</button></div>{showModal && <Modal onToggle={toggleModal} id={id} name={name} number={number} />}</li>\n}\n\nContactItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n}\n\nexport default ContactItem","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport ContactItem from '../ContactItem/ContactItem'\nimport css from './ContactList.module.css'\n\nconst ContactList = () => {\n    const filteredContactsList = useSelector(selectVisibleContacts);\n\n    return <ul className={css.list}>\n        {filteredContactsList.map(({name, number, id}) => {\n            return <ContactItem name={name} number={number} key={id} id={id} />\n        })}\n    </ul>\n}\n\nexport default ContactList","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\",\"inputLabel\":\"Filter_inputLabel__AHo9j\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { selectFilter } from \"redux/contacts/selectors\";\nimport { setFilter } from \"../../redux/contacts/filterSlice\";\nimport css from './Filter.module.css'\n\nconst Filter = () => {\n\n  const { filter } = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = (event) => {\n    dispatch(setFilter(event.target.value))\n  }\n  \n  return <label className={css.inputLabel}> Find contacts by name\n        <input \n            className={css.input}\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleFilter}\n        />\n    </label>\n}\n\nexport default Filter","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectLoading, selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\nimport css from \"./PagesStyle.module.css\"\n\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectLoading);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    \n    return (\n    <div className={css.contact_container}>\n        <h2 className={css.contact_title}>Phonebook</h2>      \n        <ContactForm />\n        <h2 className={css.contact_title}>Contacts</h2>\n        <Filter />\n        {isLoading && !error && <p>Loading contacts...</p>}\n        <ContactList />\n    </div>)\n}\n\nexport default Contacts;","// extracted by mini-css-extract-plugin\nexport default {\"home_container\":\"PagesStyle_home_container__2xcs9\",\"home_title\":\"PagesStyle_home_title__RFnUq\",\"home_text\":\"PagesStyle_home_text__fGaIS\",\"contact_container\":\"PagesStyle_contact_container__SbMrd\",\"contact_title\":\"PagesStyle_contact_title__9zuLk\"};"],"names":["selectContacts","state","contacts","items","selectLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","normalizedFilter","toLocaleLowerCase","name","includes","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","addNewContact","contactName","normalizedNameNewContract","toLowerCase","map","contact","alert","addContact","handleChange","event","currentTarget","value","className","css","onSubmit","preventDefault","type","onChange","pattern","title","required","id","onToggle","prevName","prevNumber","updatedContact","updateContact","defaultValue","modalRoot","document","querySelector","useEffect","handleKeyDown","code","window","addEventListener","removeEventListener","createPortal","onClick","target","showModal","setShowModal","toggleModal","prevState","deleteContact","filteredContactsList","setFilter","fetchContacts"],"sourceRoot":""}